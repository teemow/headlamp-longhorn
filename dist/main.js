(function(g,a){typeof exports=="object"&&typeof module<"u"?a(require("@kinvolk/headlamp-plugin/lib"),require("react/jsx-runtime"),require("@kinvolk/headlamp-plugin/lib/components/common"),require("@kinvolk/headlamp-plugin/lib/Utils"),require("@kinvolk/headlamp-plugin/lib/lib/k8s/crd"),require("react"),require("@mui/material"),require("react-router-dom")):typeof define=="function"&&define.amd?define(["@kinvolk/headlamp-plugin/lib","react/jsx-runtime","@kinvolk/headlamp-plugin/lib/components/common","@kinvolk/headlamp-plugin/lib/Utils","@kinvolk/headlamp-plugin/lib/lib/k8s/crd","react","@mui/material","react-router-dom"],a):(g=typeof globalThis<"u"?globalThis:g||self,a(g.pluginLib,g.pluginLib.ReactJSX,g.pluginLib.CommonComponents,g.pluginLib.Utils,g.pluginLib.Crd,g.pluginLib.React,g.pluginLib.MuiMaterial,g.pluginLib.ReactRouter))})(this,function(g,a,r,C,L,q,K,j){"use strict";const M=(n=>n&&typeof n=="object"&&"default"in n?n:{default:n})(q),T="longhorn.io",V="v1beta2";function I(){return L.makeCustomResourceClass({apiInfo:[{group:T,version:V}],isNamespaced:!0,singularName:"Volume",pluralName:"volumes"})}function E(){return L.makeCustomResourceClass({apiInfo:[{group:T,version:V}],isNamespaced:!0,singularName:"Node",pluralName:"nodes"})}function B(){return L.makeCustomResourceClass({apiInfo:[{group:T,version:V}],isNamespaced:!0,singularName:"Engine",pluralName:"engines"})}const Y="bcdfghjklmnpqrstvwxyz";function U(n){const o={Volume:"volumes",Node:"nodes",Engine:"engines",Replica:"replicas",BackupTarget:"backuptargets",Backup:"backups",Setting:"settings",RecurringJob:"recurringjobs",Snapshot:"snapshots",InstanceManager:"instancemanagers",ShareManager:"sharemanagers",EngineImage:"engineimages",BackingImage:"backingimages",BackingImageManager:"backingimagemanagers",BackingImageDataSource:"backingimagedatasources",VolumeAttachment:"volumeattachments",Orphan:"orphans",SystemBackup:"systembackups",SystemRestore:"systemrestores",VolumeRestore:"volumerestores",VolumeRebuilding:"volumerebuildings"};if(o[n])return o[n];const e=n.toLowerCase(),s=e.substring(e.length-1,e.length),i=e.substring(e.length-2,e.length-1);switch(s){case"s":case"x":case"z":return e+"es";case"y":return G(i)?H(e):D(e);case"h":return i==="c"||i==="s"?O(e):D(e);case"e":return i==="f"?A(e.substring(0,e.length-1)):D(e);case"f":return A(e);default:return D(e)}}function O(n){return n+"es"}function H(n){return n.substring(0,n.length-1)+"ies"}function D(n){return n+"s"}function A(n){return n.substring(0,n.length-1)+"ves"}function G(n){return Y.indexOf(n)>=0}function x(n,o){return U(n.kind),{header:"Name",accessorKey:"metadata.name",Cell:({cell:e,row:s})=>a.jsx(r.Link,{routeName:`${o}`,params:{name:s.original.metadata.name,namespace:s.original.metadata.namespace},children:a.jsx("span",{children:e.getValue()})})}}function F(n){var l,t,u,d;const{item:o}=n;if(!((l=o==null?void 0:o.jsonData)!=null&&l.status))return a.jsx("span",{children:"-"});const e=o.jsonData.status.state;if(e){let c="",f=e;switch(e.toLowerCase()){case"attached":case"healthy":c="success";break;case"detached":case"degraded":case"creating":case"rebuilding":c="warning";break;case"faulted":case"error":c="error";break;default:c="warning";break}return a.jsx(r.StatusLabel,{status:c,children:f})}const s=(t=o.jsonData.status.conditions)==null?void 0:t.find(c=>c.type==="Ready");if(!s)return a.jsx("span",{children:"-"});if((d=(u=o==null?void 0:o.jsonData)==null?void 0:u.spec)!=null&&d.suspend)return a.jsx(r.StatusLabel,{status:"warning",children:"Suspended"});if(s.status==="Unknown")return a.jsx(r.StatusLabel,{status:"warning",children:"Reconcilingâ€¦"});if(s.reason==="DependencyNotReady")return a.jsx(r.StatusLabel,{status:"warning",children:a.jsx(K.Tooltip,{title:s.message,children:"Waiting"})});const i=s.status==="True";return a.jsx(r.StatusLabel,{status:i?"success":"error",children:a.jsx(K.Tooltip,{title:s.message,children:i?"Ready":"Failed"})})}function J(n){var e,s,i,l,t;const o=(i=(s=(e=n==null?void 0:n.jsonData)==null?void 0:e.status)==null?void 0:s.conditions)==null?void 0:i.find(u=>u.type==="Ready");return(o==null?void 0:o.lastTransitionTime)||((t=(l=n==null?void 0:n.jsonData)==null?void 0:l.metadata)==null?void 0:t.creationTimestamp)}function w(n={}){const{routeName:o,routeNamePrefix:e,resourceClass:s,...i}=n;return delete i.extends,e&&s?x(s,e):{header:"Name",accessorKey:"metadata.name",...o?{Cell:({row:{original:l}})=>a.jsx(r.Link,{routeName:o,params:{name:l.metadata.name,namespace:l.metadata.namespace},children:l.metadata.name})}:{},...i}}function P(n){const{columns:o,data:e,...s}=n,i=M.default.useMemo(()=>o.map(l=>{if(typeof l=="string")switch(l){case"namespace":return{header:"Namespace",accessorKey:"metadata.namespace",Cell:({row:{original:t}})=>a.jsx(r.Link,{routeName:"namespace",params:{name:t.metadata.namespace},children:t.metadata.namespace})};case"name":return w();case"lastUpdated":return{header:"Last Updated",accessorFn:t=>J(t),Cell:({cell:t})=>a.jsx(r.DateLabel,{format:"mini",date:t.getValue()})};case"age":return{id:"age",header:"Age",gridTemplate:"min-content",accessorFn:t=>-new Date(t.metadata.creationTimestamp).getTime(),enableColumnFilter:!1,muiTableBodyCellProps:{align:"right"},Cell:({row:t})=>t.original&&a.jsx(r.DateLabel,{date:t.original.metadata.creationTimestamp,format:"mini"})};case"status":return{header:"Status",accessorFn:t=>a.jsx(F,{item:t})};case"message":return{header:"Message",accessorFn:t=>{var d,c,f,m;const u=(f=(c=(d=t.jsonData.status)==null?void 0:d.conditions)==null?void 0:c.find(p=>p.type==="Ready"))==null?void 0:f.message;return a.jsx(r.ShowHideLabel,{labelId:`${(m=t==null?void 0:t.metadata)==null?void 0:m.uid}-message`,children:u??""})}};default:return{header:l,accessorKey:l}}return l.extends==="name"&&l.routeNamePrefix||l.extends==="name"?w(l):l}),[o]);return a.jsx(r.Table,{data:e,loading:e===null,muiTableBodyRowProps:({row:l})=>{var t,u;return{key:((u=(t=l.original)==null?void 0:t.metadata)==null?void 0:u.uid)??JSON.stringify(l.original)}},...s,columns:i})}function _(){const n=C.useFilterFunc(),[o,e]=I().useList();return(e==null?void 0:e.status)===404?a.jsx(r.SectionBox,{title:"Volumes",children:"Longhorn Volumes CRD not found."}):e?a.jsxs(r.SectionBox,{title:"Volumes",children:["Error loading Volumes: ",e.message]}):a.jsx(r.SectionBox,{title:a.jsx(r.SectionFilterHeader,{title:"Volumes"}),children:a.jsx(P,{data:o,columns:[x(I(),"longhorn/volumes"),"namespace",{header:"State",accessorKey:"status.state"},{header:"Size",accessorKey:"spec.size"},{header:"Node",accessorKey:"status.currentNodeID"},{header:"Attached",accessorFn:s=>{var i;return((i=s.status)==null?void 0:i.state)==="attached"?"Yes":"No"}},"age"],filterFunction:n})})}function W(){var t,u,d,c,f,m;const{namespace:n,name:o}=j.useParams(),[e,s]=I().useGet(o,n);if(s)return a.jsxs(r.SectionBox,{title:`Volume ${o}`,children:["Error loading Volume: ",s.message]});function i(p){var S,b,v,y,k,N,z,$;if(!p)return[];const h=p.jsonData;return[{name:"State",value:((S=h.status)==null?void 0:S.state)||"-"},{name:"Size",value:((b=h.spec)==null?void 0:b.size)||"-"},{name:"Node",value:((v=h.status)==null?void 0:v.currentNodeID)||"-"},{name:"Attached",value:((y=h.status)==null?void 0:y.state)==="attached"?"Yes":"No"},{name:"Robustness",value:((k=h.status)==null?void 0:k.robustness)||"-"},{name:"Replicas",value:((N=h.spec)==null?void 0:N.numberOfReplicas)||"-"},{name:"Frontend",value:((z=h.spec)==null?void 0:z.frontend)||"-"},{name:"Stale Replica Timeout",value:`${(($=h.spec)==null?void 0:$.staleReplicaTimeout)||"-"} min`}]}function l(){return[]}return a.jsxs(a.Fragment,{children:[a.jsx(r.MainInfoSection,{resource:e,extraInfo:i(e),actions:l()}),((u=(t=e==null?void 0:e.jsonData)==null?void 0:t.status)==null?void 0:u.conditions)&&a.jsx(r.SectionBox,{title:"Conditions",children:a.jsx(r.ConditionsTable,{resource:e.jsonData,showLastUpdate:!0})}),((c=(d=e==null?void 0:e.jsonData)==null?void 0:d.status)==null?void 0:c.replicas)&&a.jsx(r.SectionBox,{title:"Replicas",children:a.jsx(r.NameValueTable,{rows:e.jsonData.status.replicas.map(p=>({name:p.name,value:`Mode: ${p.mode}, Healthy: ${p.healthyAt?"Yes":"No"}`}))})}),((m=(f=e==null?void 0:e.jsonData)==null?void 0:f.status)==null?void 0:m.kubernetesStatus)&&a.jsx(r.SectionBox,{title:"Kubernetes Status",children:a.jsx(r.NameValueTable,{rows:[{name:"PV Name",value:e.jsonData.status.kubernetesStatus.pvName||"-"},{name:"PV Status",value:e.jsonData.status.kubernetesStatus.pvStatus||"-"},{name:"PVC Name",value:e.jsonData.status.kubernetesStatus.pvcName||"-"},{name:"Namespace",value:e.jsonData.status.kubernetesStatus.namespace||"-"},{name:"Last Pod Ref At",value:e.jsonData.status.kubernetesStatus.lastPodRefAt||"-"}]})})]})}function X(){const n=C.useFilterFunc(),[o,e]=E().useList();return(e==null?void 0:e.status)===404?a.jsx(r.SectionBox,{title:"Nodes",children:"Longhorn Nodes CRD not found."}):e?a.jsxs(r.SectionBox,{title:"Nodes",children:["Error loading Nodes: ",e.message]}):a.jsx(r.SectionBox,{title:a.jsx(r.SectionFilterHeader,{title:"Nodes"}),children:a.jsx(P,{data:o,columns:[x(E(),"longhorn/nodes"),{header:"State",accessorFn:s=>a.jsx(F,{item:s})},{header:"Allow Scheduling",accessorKey:"spec.allowScheduling",Cell:({cell:s})=>s.getValue()?"Yes":"No"},{header:"Schedulable",accessorFn:s=>{var l,t,u;const i=(u=(t=(l=s.jsonData)==null?void 0:l.status)==null?void 0:t.conditions)==null?void 0:u.find(d=>d.type==="Schedulable");return(i==null?void 0:i.status)==="True"?"Yes":"No"}},{header:"Ready",accessorFn:s=>{var l,t,u;const i=(u=(t=(l=s.jsonData)==null?void 0:l.status)==null?void 0:t.conditions)==null?void 0:u.find(d=>d.type==="Ready");return(i==null?void 0:i.status)==="True"?"Yes":"No"}},{header:"Tags",accessorKey:"spec.tags",Cell:({cell:s})=>{var i;return((i=s.getValue())==null?void 0:i.join(", "))||"-"}},"age"],filterFunction:n})})}function Q(){var t,u;const{name:n}=j.useParams(),o="longhorn-system",[e,s]=E().useGet(n,o);if((s==null?void 0:s.status)===404)return a.jsxs(r.SectionBox,{title:`Node ${n}`,children:["Longhorn Node CRD not found in namespace '",o,"'. Is Longhorn installed and the namespace correct?"]});if(s)return a.jsxs(r.SectionBox,{title:`Node ${n}`,children:["Error loading Node: ",s.message]});function i(d){var f,m,p,h,S,b,v,y,k;if(!d)return[];const c=d.jsonData;return[{name:"State",value:a.jsx(F,{item:d})},{name:"Allow Scheduling",value:(f=c.spec)!=null&&f.allowScheduling?"Yes":"No"},{name:"Schedulable",value:((h=(p=(m=c.status)==null?void 0:m.conditions)==null?void 0:p.find(N=>N.type==="Schedulable"))==null?void 0:h.status)==="True"?"Yes":"No"},{name:"Ready",value:((v=(b=(S=c.status)==null?void 0:S.conditions)==null?void 0:b.find(N=>N.type==="Ready"))==null?void 0:v.status)==="True"?"Yes":"No"},{name:"Tags",value:((k=(y=c.spec)==null?void 0:y.tags)==null?void 0:k.join(", "))||"-"}]}const l=M.default.useMemo(()=>{var d,c;return(c=(d=e==null?void 0:e.jsonData)==null?void 0:d.status)!=null&&c.diskStatus?Object.entries(e.jsonData.status.diskStatus).map(([f,m])=>{var p;return{name:f,storageAvailable:m.storageAvailable||"-",storageScheduled:m.storageScheduled||"-",storageMaximum:m.storageMaximum||"-",conditions:((p=m.conditions)==null?void 0:p.map(h=>`${h.type}=${h.status}`).join(", "))||"-"}}):[]},[e]);return a.jsxs(a.Fragment,{children:[a.jsx(r.MainInfoSection,{resource:e,extraInfo:i(e),actions:[]}),l.length>0&&a.jsx(r.SectionBox,{title:"Disks",children:a.jsx(r.Table,{data:l,columns:[{header:"Name",accessorKey:"name"},{header:"Storage Available",accessorKey:"storageAvailable"},{header:"Storage Scheduled",accessorKey:"storageScheduled"},{header:"Storage Maximum",accessorKey:"storageMaximum"},{header:"Conditions",accessorKey:"conditions"}]})}),((u=(t=e==null?void 0:e.jsonData)==null?void 0:t.status)==null?void 0:u.conditions)&&a.jsx(r.SectionBox,{title:"Conditions",children:a.jsx(r.ConditionsTable,{resource:e.jsonData,showLastUpdate:!0})})]})}function Z(){const n=C.useFilterFunc(),[o,e]=B().useList();return(e==null?void 0:e.status)===404?a.jsx(r.SectionBox,{title:"Engines",children:"Longhorn Engines CRD not found."}):e?a.jsxs(r.SectionBox,{title:"Engines",children:["Error loading Engines: ",e.message]}):a.jsx(r.SectionBox,{title:a.jsx(r.SectionFilterHeader,{title:"Engines"}),children:a.jsx(P,{data:o,columns:[x(B(),"longhorn/engines"),"namespace",{header:"State",accessorKey:"status.currentState"},{header:"Node",accessorKey:"spec.nodeID"},{header:"Volume",accessorKey:"spec.volumeName",Cell:({cell:s,row:i})=>a.jsx(r.Link,{routeName:"longhorn/volume/detail",params:{name:s.getValue(),namespace:i.original.metadata.namespace},children:s.getValue()})},{header:"Image",accessorKey:"status.engineImage"},{header:"Size",accessorKey:"spec.volumeSize"},"age"],filterFunction:n})})}function R(){const{namespace:n,name:o}=j.useParams(),[e,s]=B().useGet(o,n);if(s)return a.jsxs(r.SectionBox,{title:`Engine ${o}`,children:["Error loading Engine: ",s.message]});function i(l){var u,d,c,f,m,p,h,S,b,v;if(!l)return[];const t=l.jsonData;return[{name:"State",value:((u=t.status)==null?void 0:u.currentState)||"-"},{name:"Node",value:((d=t.spec)==null?void 0:d.nodeID)||"-"},{name:"Volume",value:(c=t.spec)!=null&&c.volumeName?a.jsx(r.Link,{routeName:"longhorn/volume/detail",params:{name:t.spec.volumeName,namespace:t.metadata.namespace},children:t.spec.volumeName}):"-"},{name:"Engine Image",value:((f=t.status)==null?void 0:f.engineImage)||"-"},{name:"Size",value:((m=t.spec)==null?void 0:m.volumeSize)||((p=t.status)==null?void 0:p.currentSize)||"-"},{name:"Actual Size",value:((h=t.status)==null?void 0:h.actualSize)||"-"},{name:"IP",value:((S=t.status)==null?void 0:S.ip)||"-"},{name:"Port",value:((b=t.status)==null?void 0:b.port)||"-"},{name:"Replica Mode Map",value:a.jsx("pre",{children:JSON.stringify(((v=t.status)==null?void 0:v.replicaModeMap)||{},null,2)})}]}return a.jsx(a.Fragment,{children:a.jsx(r.MainInfoSection,{resource:e,extraInfo:i(e),actions:[]})})}g.registerSidebarEntry({parent:null,name:"longhorn",label:"Longhorn",url:"/longhorn/volumes",icon:"mdi:cow"}),g.registerSidebarEntry({parent:"longhorn",name:"volumes",label:"Volumes",url:"/longhorn/volumes"}),g.registerSidebarEntry({parent:"longhorn",name:"nodes",label:"Nodes",url:"/longhorn/nodes"}),g.registerSidebarEntry({parent:"longhorn",name:"engines",label:"Engines",url:"/longhorn/engines"}),g.registerRoute({path:"/longhorn/volumes",name:"longhorn/volumes",parent:"longhorn",sidebar:"volumes",component:_,exact:!0}),g.registerRoute({path:"/longhorn/volumes/:namespace/:name",name:"longhorn/volume/detail",parent:"longhorn",sidebar:"volumes",component:W,exact:!0}),g.registerRoute({path:"/longhorn/nodes",name:"longhorn/nodes",parent:"longhorn",sidebar:"nodes",component:X,exact:!0}),g.registerRoute({path:"/longhorn/nodes/:name",name:"longhorn/node/detail",parent:"longhorn",sidebar:"nodes",component:Q,exact:!0}),g.registerRoute({path:"/longhorn/engines",name:"longhorn/engines",parent:"longhorn",sidebar:"engines",component:Z,exact:!0}),g.registerRoute({path:"/longhorn/engines/:namespace/:name",name:"longhorn/engine/detail",parent:"longhorn",sidebar:"engines",component:R,exact:!0})});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
