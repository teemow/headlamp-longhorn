(function(u,t){typeof exports=="object"&&typeof module<"u"?t(require("@kinvolk/headlamp-plugin/lib"),require("react/jsx-runtime"),require("@kinvolk/headlamp-plugin/lib/components/common"),require("@kinvolk/headlamp-plugin/lib/Utils"),require("@kinvolk/headlamp-plugin/lib/lib/k8s/crd"),require("react"),require("@mui/material"),require("react-router-dom")):typeof define=="function"&&define.amd?define(["@kinvolk/headlamp-plugin/lib","react/jsx-runtime","@kinvolk/headlamp-plugin/lib/components/common","@kinvolk/headlamp-plugin/lib/Utils","@kinvolk/headlamp-plugin/lib/lib/k8s/crd","react","@mui/material","react-router-dom"],t):(u=typeof globalThis<"u"?globalThis:u||self,t(u.pluginLib,u.pluginLib.ReactJSX,u.pluginLib.CommonComponents,u.pluginLib.Utils,u.pluginLib.Crd,u.pluginLib.React,u.pluginLib.MuiMaterial,u.pluginLib.ReactRouter))})(this,function(u,t,o,w,B,F,v,I){"use strict";const q=(a=>a&&typeof a=="object"&&"default"in a?a:{default:a})(F),M="longhorn.io",A="v1beta2";function k(){return B.makeCustomResourceClass({apiInfo:[{group:M,version:A}],isNamespaced:!0,singularName:"Volume",pluralName:"volumes"})}const K="bcdfghjklmnpqrstvwxyz";function U(a){const n={Volume:"volumes",Node:"nodes",Engine:"engines",Replica:"replicas",BackupTarget:"backuptargets",Backup:"backups",Setting:"settings",RecurringJob:"recurringjobs",Snapshot:"snapshots",InstanceManager:"instancemanagers",ShareManager:"sharemanagers",EngineImage:"engineimages",BackingImage:"backingimages",BackingImageManager:"backingimagemanagers",BackingImageDataSource:"backingimagedatasources",VolumeAttachment:"volumeattachments",Orphan:"orphans",SystemBackup:"systembackups",SystemRestore:"systemrestores",VolumeRestore:"volumerestores",VolumeRebuilding:"volumerebuildings"};if(n[a])return n[a];const e=a.toLowerCase(),i=e.substring(e.length-1,e.length),l=e.substring(e.length-2,e.length-1);switch(i){case"s":case"x":case"z":return e+"es";case"y":return $(l)?z(e):b(e);case"h":return l==="c"||l==="s"?E(e):b(e);case"e":return l==="f"?y(e.substring(0,e.length-1)):b(e);case"f":return y(e);default:return b(e)}}function E(a){return a+"es"}function z(a){return a.substring(0,a.length-1)+"ies"}function b(a){return a+"s"}function y(a){return a.substring(0,a.length-1)+"ves"}function $(a){return K.indexOf(a)>=0}function L(a,n){return U(a.kind),{header:"Name",accessorKey:"metadata.name",Cell:({cell:e,row:i})=>t.jsx(o.Link,{routeName:`${n}`,params:{name:i.original.metadata.name,namespace:i.original.metadata.namespace},children:t.jsx("span",{children:e.getValue()})})}}function O(a){var r,s,d,g;const{item:n}=a;if(!((r=n==null?void 0:n.jsonData)!=null&&r.status))return t.jsx("span",{children:"-"});const e=n.jsonData.status.state;if(e){let c="",m=e;switch(e.toLowerCase()){case"attached":case"healthy":c="success";break;case"detached":case"degraded":case"creating":case"rebuilding":c="warning";break;case"faulted":case"error":c="error";break;default:c="warning";break}return t.jsx(o.StatusLabel,{status:c,children:m})}const i=(s=n.jsonData.status.conditions)==null?void 0:s.find(c=>c.type==="Ready");if(!i)return t.jsx("span",{children:"-"});if((g=(d=n==null?void 0:n.jsonData)==null?void 0:d.spec)!=null&&g.suspend)return t.jsx(o.StatusLabel,{status:"warning",children:"Suspended"});if(i.status==="Unknown")return t.jsx(o.StatusLabel,{status:"warning",children:"Reconcilingâ€¦"});if(i.reason==="DependencyNotReady")return t.jsx(o.StatusLabel,{status:"warning",children:t.jsx(v.Tooltip,{title:i.message,children:"Waiting"})});const l=i.status==="True";return t.jsx(o.StatusLabel,{status:l?"success":"error",children:t.jsx(v.Tooltip,{title:i.message,children:l?"Ready":"Failed"})})}function _(a){var e,i,l,r,s;const n=(l=(i=(e=a==null?void 0:a.jsonData)==null?void 0:e.status)==null?void 0:i.conditions)==null?void 0:l.find(d=>d.type==="Ready");return(n==null?void 0:n.lastTransitionTime)||((s=(r=a==null?void 0:a.jsonData)==null?void 0:r.metadata)==null?void 0:s.creationTimestamp)}function S(a={}){const{routeName:n,routeNamePrefix:e,resourceClass:i,...l}=a;return delete l.extends,e&&i?L(i,e):{header:"Name",accessorKey:"metadata.name",...n?{Cell:({row:{original:r}})=>t.jsx(o.Link,{routeName:n,params:{name:r.metadata.name,namespace:r.metadata.namespace},children:r.metadata.name})}:{},...l}}function H(a){const{columns:n,data:e,...i}=a,l=q.default.useMemo(()=>n.map(r=>{if(typeof r=="string")switch(r){case"namespace":return{header:"Namespace",accessorKey:"metadata.namespace",Cell:({row:{original:s}})=>t.jsx(o.Link,{routeName:"namespace",params:{name:s.metadata.namespace},children:s.metadata.namespace})};case"name":return S();case"lastUpdated":return{header:"Last Updated",accessorFn:s=>_(s),Cell:({cell:s})=>t.jsx(o.DateLabel,{format:"mini",date:s.getValue()})};case"age":return{id:"age",header:"Age",gridTemplate:"min-content",accessorFn:s=>-new Date(s.metadata.creationTimestamp).getTime(),enableColumnFilter:!1,muiTableBodyCellProps:{align:"right"},Cell:({row:s})=>s.original&&t.jsx(o.DateLabel,{date:s.original.metadata.creationTimestamp,format:"mini"})};case"status":return{header:"Status",accessorFn:s=>t.jsx(O,{item:s})};case"message":return{header:"Message",accessorFn:s=>{var g,c,m,f;const d=(m=(c=(g=s.jsonData.status)==null?void 0:g.conditions)==null?void 0:c.find(p=>p.type==="Ready"))==null?void 0:m.message;return t.jsx(o.ShowHideLabel,{labelId:`${(f=s==null?void 0:s.metadata)==null?void 0:f.uid}-message`,children:d??""})}};default:return{header:r,accessorKey:r}}return r.extends==="name"&&r.routeNamePrefix||r.extends==="name"?S(r):r}),[n]);return t.jsx(o.Table,{data:e,loading:e===null,muiTableBodyRowProps:({row:r})=>{var s,d;return{key:((d=(s=r.original)==null?void 0:s.metadata)==null?void 0:d.uid)??JSON.stringify(r.original)}},...i,columns:l})}function J(){const a=w.useFilterFunc(),[n,e]=k().useList();return(e==null?void 0:e.status)===404?t.jsx(o.SectionBox,{title:"Volumes",children:"Longhorn Volumes CRD not found."}):e?t.jsxs(o.SectionBox,{title:"Volumes",children:["Error loading Volumes: ",e.message]}):t.jsx(o.SectionBox,{title:t.jsx(o.SectionFilterHeader,{title:"Volumes"}),children:t.jsx(H,{data:n,columns:[L(k(),"longhorn/volumes"),"namespace",{header:"State",accessorKey:"status.state"},{header:"Size",accessorKey:"spec.size"},{header:"Node",accessorKey:"status.currentNodeID"},{header:"Attached",accessorFn:i=>{var l;return((l=i.status)==null?void 0:l.state)==="attached"?"Yes":"No"}},"age"],filterFunction:a})})}function Y(){var s,d,g,c,m,f;const{namespace:a,name:n}=I.useParams(),[e,i]=k().useGet(n,a);if(i)return t.jsxs(o.SectionBox,{title:`Volume ${n}`,children:["Error loading Volume: ",i.message]});function l(p){var N,D,C,j,T,x,V,P;if(!p)return[];const h=p.jsonData;return[{name:"State",value:((N=h.status)==null?void 0:N.state)||"-"},{name:"Size",value:((D=h.spec)==null?void 0:D.size)||"-"},{name:"Node",value:((C=h.status)==null?void 0:C.currentNodeID)||"-"},{name:"Attached",value:((j=h.status)==null?void 0:j.state)==="attached"?"Yes":"No"},{name:"Robustness",value:((T=h.status)==null?void 0:T.robustness)||"-"},{name:"Replicas",value:((x=h.spec)==null?void 0:x.numberOfReplicas)||"-"},{name:"Frontend",value:((V=h.spec)==null?void 0:V.frontend)||"-"},{name:"Stale Replica Timeout",value:`${((P=h.spec)==null?void 0:P.staleReplicaTimeout)||"-"} min`}]}function r(){return[]}return t.jsxs(t.Fragment,{children:[t.jsx(o.MainInfoSection,{resource:e,extraInfo:l(e),actions:r()}),((d=(s=e==null?void 0:e.jsonData)==null?void 0:s.status)==null?void 0:d.conditions)&&t.jsx(o.SectionBox,{title:"Conditions",children:t.jsx(o.ConditionsTable,{resource:e.jsonData,showLastUpdate:!0})}),((c=(g=e==null?void 0:e.jsonData)==null?void 0:g.status)==null?void 0:c.replicas)&&t.jsx(o.SectionBox,{title:"Replicas",children:t.jsx(o.NameValueTable,{rows:e.jsonData.status.replicas.map(p=>({name:p.name,value:`Mode: ${p.mode}, Healthy: ${p.healthyAt?"Yes":"No"}`}))})}),((f=(m=e==null?void 0:e.jsonData)==null?void 0:m.status)==null?void 0:f.kubernetesStatus)&&t.jsx(o.SectionBox,{title:"Kubernetes Status",children:t.jsx(o.NameValueTable,{rows:[{name:"PV Name",value:e.jsonData.status.kubernetesStatus.pvName||"-"},{name:"PV Status",value:e.jsonData.status.kubernetesStatus.pvStatus||"-"},{name:"PVC Name",value:e.jsonData.status.kubernetesStatus.pvcName||"-"},{name:"Namespace",value:e.jsonData.status.kubernetesStatus.namespace||"-"},{name:"Last Pod Ref At",value:e.jsonData.status.kubernetesStatus.lastPodRefAt||"-"}]})})]})}u.registerSidebarEntry({parent:null,name:"longhorn",label:"Longhorn",url:"/longhorn",icon:"mdi:cow"}),u.registerSidebarEntry({parent:"longhorn",name:"volumes",label:"Volumes",url:"/longhorn/volumes"}),u.registerRoute({path:"/longhorn/volumes",name:"longhorn/volumes",parent:"longhorn",sidebar:"volumes",component:J,exact:!0}),u.registerRoute({path:"/longhorn/volumes/:namespace/:name",name:"longhorn/volume/detail",parent:"longhorn",sidebar:"volumes",component:Y,exact:!0})});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
